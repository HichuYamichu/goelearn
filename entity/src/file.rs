//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use super::sea_orm_active_enums::FileType;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "file")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub name: String,
    pub public: bool,
    pub file_type: FileType,
    pub parent_id: Option<Uuid>,
    pub class_id: Uuid,
    pub message_id: Option<Uuid>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::assignment_file::Entity")]
    AssignmentFile,
    #[sea_orm(has_many = "super::assignment_submission_file::Entity")]
    AssignmentSubmissionFile,
    #[sea_orm(
        belongs_to = "super::class::Entity",
        from = "Column::ClassId",
        to = "super::class::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Class,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::message::Entity",
        from = "Column::MessageId",
        to = "super::message::Column::Id",
        on_update = "Restrict",
        on_delete = "Restrict"
    )]
    Message,
}

impl Related<super::assignment_file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AssignmentFile.def()
    }
}

impl Related<super::assignment_submission_file::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AssignmentSubmissionFile.def()
    }
}

impl Related<super::class::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Class.def()
    }
}

impl Related<super::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Message.def()
    }
}

impl Related<super::assignment::Entity> for Entity {
    fn to() -> RelationDef {
        super::assignment_file::Relation::Assignment.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::assignment_file::Relation::File.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
